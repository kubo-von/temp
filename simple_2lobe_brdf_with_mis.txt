//PSEUDO CODE

closure_f(Radiance, Dir){
	omega_i = worldToTangent(Dir);
	omega_m = (omega_o + omega_i ).normalize();
	o_dot_h = omega_o.dot(omega_m);
	fresnel = fresnel::fresnel_dielectric(o_dot_h, 1.0, ior);
	specular_weight = lerp(0.04, 0.4, metallic); //
  	specular_weight = specular_weight+(1.0-specular_weight)*fresnel;
	diffuse_weight = lerp((1.0 - specular_weight), 0.0, metallic)
	spec_color = lerp(white,albedo,metallic);
	
	return(
		lambert::f(N,Dir) * radiance * diffuse_weight * albedo 
		+ggx::f(omega_m, omega_i, omega_o, roughness) * radiance * specular_weight * spec_color
	)
}

omega_o = worldToTangent(viewerDirection)

light = choseLightToSample();
lightRadiance, lightSampleDir, lightSamplePdf = Light.eval()
lightSamplePdf /= totalNumberOfLights
lightDirect = closure_f(lightRadiance,lightSampleDir)

rndLobe = rng.get1D()
rndSample = rng.get2D()
if rndLobe < 0.5 :
	bsdfSampleDir = lambert::sample(rndSample)
else:
	bsdfSampleDir = ggx::sample(rndSample,roughness)

omega_i_bsdf = worldToTangent(bsdfSampleDir)
bsdfSamplePdf = 
( lambert::pdf(omega_i_bsdf) 
+ ggx::pdf(omega_i_bsdf,omega_o,roughness) )/2.0

indirect = Zero
lightBsdf = Zero
rayResult = traceIndirectLight(bsdfSampleDir)
if rayResult.hit:
	if rayResult.hit.geometry.isLight(){
		lightBsdf = closure_f(rayResult.radiance,bsdfSampleDir)
	else:
		indirect = closure_f(rayResult.radiance,bsdfSampleDir)


misWeight = balanceHeuristics(LightSamplePdf,bsdfSamplePdf)
direct = lightDirect*misWeight + lightBsdf*(1-misWeight)

return direct + indirect
